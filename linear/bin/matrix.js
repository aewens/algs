// Generated by CoffeeScript 1.7.1
(function() {
  var Matrix,
    __slice = [].slice;

  Matrix = function(r, c) {
    if (typeof r === "number" && typeof c === "number") {
      return new Matrix.init(r, c);
    } else {
      return void 0;
    }
  };

  Matrix.init = function(r, c) {
    var _ref;
    _ref = [r, c], this.r = _ref[0], this.c = _ref[1];
    this.self = [0, 0, []];
    return this;
  };

  Matrix.fn = Matrix.prototype = {
    row: function() {
      var xs;
      xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (xs.length !== this.c) {
        console.log("Wrong number of arguments");
        return this;
      }
      if (!(this.self[0] < this.r && xs.length <= this.c)) {
        console.log("Matrix is filled");
        return this;
      }
      this.self[2].push(xs);
      this.self[0] = this.self[0] + 1;
      this.self[1] = xs.length;
      return this;
    },
    col: function() {
      var i, xs, _i, _ref;
      xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (xs.length !== this.r) {
        console.log(this.r, xs.length);
        console.log("Wrong number of arguments");
        return this;
      }
      if (!(this.self[1] < this.c && xs.length <= this.r)) {
        console.log("Matrix is filled");
        return this;
      }
      for (i = _i = 0, _ref = xs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.self[2][i] === void 0) {
          this.self[2][i] = [];
        }
        this.self[2][i].push(xs[i]);
      }
      this.self[0] = xs.length;
      this.self[1] = this.self[1] + 1;
      return this;
    }
  };

  Matrix.init.prototype = Matrix.fn;

  window.Matrix = Matrix;

}).call(this);
